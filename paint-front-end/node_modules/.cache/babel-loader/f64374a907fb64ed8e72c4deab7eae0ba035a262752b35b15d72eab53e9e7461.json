{"ast":null,"code":"var _jsxFileName = \"D:\\\\paint-project\\\\paint-front-end\\\\src\\\\portrait.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from \"react\";\nimport { Stage, Layer, Rect } from \"react-konva\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Portrait() {\n  _s();\n  const stageRef = useRef();\n  const [rectangles, setRectangles] = useState([]); // List of drawn rectangles\n  const [currentRect, setCurrentRect] = useState(null); // Rectangle being drawn\n\n  const onPointerDown = () => {\n    const stage = stageRef.current;\n    const {\n      x,\n      y\n    } = stage.getPointerPosition(); // Get pointer position on canvas\n    setCurrentRect({\n      x,\n      y,\n      width: 0,\n      height: 0\n    });\n  };\n  const onPointerMove = () => {\n    if (!currentRect) return;\n    const stage = stageRef.current;\n    const {\n      x,\n      y\n    } = stage.getPointerPosition();\n    const {\n      x: startX,\n      y: startY\n    } = currentRect;\n\n    // Update rectangle dimensions\n    const newRect = {\n      x: startX,\n      y: startY,\n      width: x - startX,\n      height: y - startY\n    };\n    setCurrentRect(newRect);\n  };\n  const onPointerUp = () => {\n    if (currentRect) {\n      setRectangles([...rectangles, currentRect]); // Finalize the rectangle\n      setCurrentRect(null); // Reset current rectangle\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Stage, {\n    ref: stageRef,\n    width: window.innerWidth,\n    height: window.innerHeight,\n    onPointerDown: onPointerDown,\n    onPointerMove: onPointerMove,\n    onPointerUp: onPointerUp,\n    children: /*#__PURE__*/_jsxDEV(Layer, {\n      children: [rectangles.map((rect, i) => /*#__PURE__*/_jsxDEV(Rect, {\n        x: rect.x,\n        y: rect.y,\n        width: rect.width,\n        height: rect.height,\n        fill: \"rgba(0, 128, 255, 0.5)\",\n        stroke: \"blue\",\n        strokeWidth: 2\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this)), currentRect && /*#__PURE__*/_jsxDEV(Rect, {\n        x: currentRect.x,\n        y: currentRect.y,\n        width: currentRect.width,\n        height: currentRect.height,\n        fill: \"rgba(0, 128, 255, 0.3)\",\n        stroke: \"blue\",\n        strokeWidth: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(Portrait, \"j8BIS6x8CLVOJyl70GRKAc78MHM=\");\n_c = Portrait;\nvar _c;\n$RefreshReg$(_c, \"Portrait\");","map":{"version":3,"names":["React","useRef","useState","Stage","Layer","Rect","jsxDEV","_jsxDEV","Portrait","_s","stageRef","rectangles","setRectangles","currentRect","setCurrentRect","onPointerDown","stage","current","x","y","getPointerPosition","width","height","onPointerMove","startX","startY","newRect","onPointerUp","ref","window","innerWidth","innerHeight","children","map","rect","i","fill","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/paint-project/paint-front-end/src/portrait.js"],"sourcesContent":["import React, { useRef, useState } from \"react\";\r\nimport { Stage, Layer, Rect } from \"react-konva\";\r\n\r\nexport default function Portrait() {\r\n  const stageRef = useRef();\r\n  const [rectangles, setRectangles] = useState([]); // List of drawn rectangles\r\n  const [currentRect, setCurrentRect] = useState(null); // Rectangle being drawn\r\n\r\n  const onPointerDown = () => {\r\n    const stage = stageRef.current;\r\n    const { x, y } = stage.getPointerPosition(); // Get pointer position on canvas\r\n    setCurrentRect({ x, y, width: 0, height: 0 });\r\n  };\r\n\r\n  const onPointerMove = () => {\r\n    if (!currentRect) return;\r\n\r\n    const stage = stageRef.current;\r\n    const { x, y } = stage.getPointerPosition();\r\n    const { x: startX, y: startY } = currentRect;\r\n\r\n    // Update rectangle dimensions\r\n    const newRect = {\r\n      x: startX,\r\n      y: startY,\r\n      width: x - startX,\r\n      height: y - startY,\r\n    };\r\n\r\n    setCurrentRect(newRect);\r\n  };\r\n\r\n  const onPointerUp = () => {\r\n    if (currentRect) {\r\n      setRectangles([...rectangles, currentRect]); // Finalize the rectangle\r\n      setCurrentRect(null); // Reset current rectangle\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Stage\r\n      ref={stageRef}\r\n      width={window.innerWidth}\r\n      height={window.innerHeight}\r\n      onPointerDown={onPointerDown}\r\n      onPointerMove={onPointerMove}\r\n      onPointerUp={onPointerUp}\r\n    >\r\n      <Layer>\r\n        {/* Render finalized rectangles */}\r\n        {rectangles.map((rect, i) => (\r\n          <Rect\r\n            key={i}\r\n            x={rect.x}\r\n            y={rect.y}\r\n            width={rect.width}\r\n            height={rect.height}\r\n            fill=\"rgba(0, 128, 255, 0.5)\"\r\n            stroke=\"blue\"\r\n            strokeWidth={2}\r\n          />\r\n        ))}\r\n\r\n        {/* Render the rectangle being drawn */}\r\n        {currentRect && (\r\n          <Rect\r\n            x={currentRect.x}\r\n            y={currentRect.y}\r\n            width={currentRect.width}\r\n            height={currentRect.height}\r\n            fill=\"rgba(0, 128, 255, 0.3)\"\r\n            stroke=\"blue\"\r\n            strokeWidth={2}\r\n          />\r\n        )}\r\n      </Layer>\r\n    </Stage>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}